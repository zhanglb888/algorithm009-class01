class Solution {
    public int lengthOfLIS(int[] nums) {
        int len = nums.length;
        if (len <= 1) {
            return len;
        }
        // tail 数组的定义：长度为i+1的上升子序列的末尾最小是几
        int[] tail = new int[len];
        // 遍历第一个数，直接放在有序数组tail 的开头
        tail[0] = nums[0];

        // end 表示有序数组tail 的最后一个已经赋值元素的索引
        int end = 0;

        for (int i = 0; i < len; i++) {
            int left = 0;
            // 这里因为当前遍历的数，有可能比有序数组tail的数组实际有效的末尾的那个元素还大
            // 因此 end+ 1 应该落在候选区间里
            int right = end + 1;
            while (left < right) {
                int mid = (left + right) >>> 1;
                if (tail[mid] < nums[i]) {
                    // 中位数肯定不是要找的数，把它写在分支的里面
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            // 因此，无需再单独判断，直接更新即可
            tail[left] = nums[i];
            // 但是end的值，需要更新，当且仅当更新位置在当前end的下一位
            if (left == end + 1) {
                end++;
            }
        }
        end++;
        return end;
    }
}
