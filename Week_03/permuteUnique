47. 全排列 II
https://leetcode-cn.com/problems/permutations-ii/
class Solution {
    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums.length == 0) {
            return result;
        }
        // 首先给数组排序
        Arrays.sort(nums);
        findUnique(nums, new boolean[nums.length], new LinkedList<Integer>());
        return result;
    }

    private void findUnique(int[] nums, boolean[] visited,
                            LinkedList<Integer> track) {
        // 结束条件
        if (track.size() == nums.length) {
            result.add(new LinkedList<>(track));
            return;
        }
        // 选择列表
        for (int i = 0; i < nums.length; i++) {
            // 其次，我们已经选择过的不需要再放进去
            if (visited[i]) {
                continue;
            }
            // 接下来，如果当前节点与他的前一个节点一样，并其他的前一个节点已经被遍历过了，就不需要了
            if (i > 0 && nums[i] == nums[i - 1] && visited[i - 1]) {
                break;
            }
            // 做出选择
            track.add(nums[i]);
            visited[i] = true;
            findUnique(nums, visited, track);
            // 撤销选择
            track.removeLast();
            visited[i] = false;
        }
    }
}
