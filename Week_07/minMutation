class Solution {
    public int minMutation(String start, String end, String[] bank) {
        HashSet<String> bank_library = new HashSet<>();
        for (String library : bank) {
            bank_library.add(library);
        }
        char[] banks = {'A','C','G','T'};
        LinkedList<String> dequeue = new LinkedList<>();
        dequeue.offer(start);
        int count = 0;
        HashSet<String> visited = new HashSet<>();
        while (!dequeue.isEmpty()){
            int size = dequeue.size();
            while (size-->0){
                String poll = dequeue.poll();
                if(poll.equals(end)){
                    return count;
                }
                char[] curr = poll.toCharArray();
                for (int i = 0; i < curr.length; i++) {
                    char old  = curr[i];
                    for (char b: banks) {
                        curr[i] = b;
                        String newStr = new String(curr);
                        if(!visited.contains(newStr)&&bank_library.contains(newStr)){
                            visited.add(newStr);
                            dequeue.offer(newStr);
                        }
                    }
                    curr[i] = old;
                }
            }
            count++;
        }
        return -1;
    }
}
