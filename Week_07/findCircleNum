class Solution {
         class UF {
        // 记录连通分量
        private int count;
        // 节点 x 的节点是parent[x]
        private int[] parent;
        // 记录树的"重量"
        private int[] size;

        public UF(int n) {
            // 一开始互补连通
            this.count = n;
            // 父节点指针初始化指向自己
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = i;
            }
        }

        public void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP == rootQ) {
                return;
            }
            // 将两棵树合并为一棵
            //parent[rootP] = rootQ;
            // parent[rootQ] = rootP; 也一样
            //两个分量合二为一
            // 小树接到大树下面，较平衡
            if (size[rootP] > size[rootQ]) {
                parent[rootQ] = rootP;
                size[rootP] += size[rootQ];
            } else {
                parent[rootP] = rootQ;
                size[rootQ] += size[rootP];
            }
            count--;
        }

        public boolean connected(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            return rootP == rootQ;
        }

        // 返回某个节点x的根节点
        private int find(int x) {
            // 根节点的parent[x]==x
            while (parent[x] != x) {
                // 进行路径压缩
                parent[x] = parent[parent[x]];
                x = parent[x];
            }
            return x;
        }

        // 返回当前的连通分量个数
        public int count() {
            return count;
        }
    }


    public int findCircleNum(int[][] M) {
        int n = M.length;
        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (M[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        return uf.count();
    }
}
